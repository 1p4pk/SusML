import os
import socket

from benchmark import timeit
from dataset import MalwareDataset
from model import MalwarePredictor
from torch import distributed as dist
from torch import nn
from torch import optim
from torch.nn.parallel import DistributedDataParallel as DDP
from torch.utils.data.dataloader import DataLoader
from train import ModelTrainer

SIZE = int(os.environ['OMPI_COMM_WORLD_SIZE'])
RANK = int(os.environ['OMPI_COMM_WORLD_RANK'])
HOSTNAME = socket.gethostname()

TRAIN_ENCODED_CSV_PATH = f"./data/train/train_encoded_{RANK}.csv"
TEST_ENCODED_CSV_PATH = f"./data/test/test_encoded_{RANK}.csv"

# TRAIN_ENCODED_CSV_PATH = f"./data/train/train_encoded.csv"
# TEST_ENCODED_CSV_PATH = f"./data/test/test_encoded.csv"

ROWS = DataLoader(MalwareDataset.load(TRAIN_ENCODED_CSV_PATH), batch_size=1).dataset.rows


@timeit(save_path=f"./data/benchmark/run_time_model_{ROWS}.csv", row_count=ROWS)
def run(backend='mpi'):
    print("Start run model:")
    dist.init_process_group(backend)
    print("Data prepared.")
    dataset = MalwareDataset.load(TRAIN_ENCODED_CSV_PATH)
    loader = DataLoader(dataset, batch_size=100)
    print(f"Number of rows: {ROWS}")
    print("Length columns: " + str(loader.dataset.cols))
    model = DDP(MalwarePredictor(loader.dataset.cols, 100, 100, 1))
    loss = nn.MSELoss()
    optimizer = optim.SGD(model.parameters(), lr=0.01)
    print("Model prepared.")
    print("Process group initialized.")
    trainer = ModelTrainer(loader, model, loss, optimizer)
    print("Trainer initialized.")
    trainer.train(20, verbose=True)
    print("Done training.")
    dist.destroy_process_group()


def init_processes(fn):
    """ Initialize the distributed environment. """
    dataset = MalwareDataset.load(TRAIN_ENCODED_CSV_PATH)
    loader = DataLoader(dataset, batch_size=1)
    global ROWS
    ROWS = loader.dataset.rows
    print(f"Running rank {RANK} of {SIZE} on {HOSTNAME}")
    fn()


if __name__ == '__main__':
    init_processes(run)

import operator
from functools import reduce
from time import sleep

import gspread
import matplotlib.pyplot as plt
import tikzplotlib
from oauth2client.service_account import ServiceAccountCredentials


def convertStringToFloat(list_string: list) -> list:
    list_string = [item for item in list_string if item.strip()]
    list_string = [item.replace(',', '.') for item in list_string]
    result = []
    for item in list_string:
        try:
            result.append(float(item))
        except ValueError:
            continue
    return result


def create_diagram(sheet_name: str, worksheets: list, xlabel: str, ylabel: str, isTwoSlots: bool):
    sheet = client.open(sheet_name)
    plt.style.use("ggplot")
    for w in worksheets:
        worksheet = sheet.worksheet(w)
        if isTwoSlots and w == "Pivot_SGD_MSE_2":
            last_col = worksheet.get("P3:P2000")
        else:
            last_col = worksheet.get("N3:N2000")
        last_col = reduce(operator.concat, last_col)
        y = convertStringToFloat(last_col)
        y.remove(y[-1])
        durations = sheet.worksheet(w).col_values(1)[2:-1]
        x = convertStringToFloat(durations)
        plt.plot(x, y, label=w.replace("Pivot_", ""))

    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend(loc="best")
    tikzplotlib.save(f"tex/{sheet_name}.tex")
    plt.show()


def create_diagram_2_slot(sheet_name: str, worksheets: dict, xlabel: str, ylabel: str, isTwoSlots: bool):
    sheet = client.open(sheet_name)
    plt.style.use("ggplot")
    for key, w in worksheets.items():
        worksheet = sheet.worksheet(w)
        if isTwoSlots and w == "Pivot_SGD_MSE_2":
            last_col = worksheet.get("P3:P2000")
        else:
            last_col = worksheet.get("N3:N2000")
        last_col = reduce(operator.concat, last_col)
        y = convertStringToFloat(last_col)
        y.remove(y[-1])
        durations = sheet.worksheet(w).col_values(1)[2:-1]
        x = convertStringToFloat(durations)
        plt.plot(x, y, label=key)

    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend(loc="best")
    tikzplotlib.save(f"tex/{sheet_name}.tex")
    plt.show()


def comparison_various_number_of_pis_diagram(sheet_name: str, column_range: str, desktop_column: str, xlabel: str,
                                             ylabel: str):
    sheet = client.open(sheet_name).sheet1
    pis = sheet.get("A2:A6")
    pis = list(map(int, reduce(operator.concat, pis)))
    y = convertStringToFloat(list(reduce(operator.concat, sheet.get(column_range))))
    plt.style.use("ggplot")
    plt.bar(pis, y, color="red")
    axes = plt.gca()
    # axes.set_xlim([min(pis), max(pis)])
    threshold = convertStringToFloat(list(reduce(operator.concat, sheet.get(desktop_column))))
    plt.axhline(y=threshold, linewidth=3, color='b')
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    colors = {'Run time': 'red', 'Single Node Run time': 'blue'}
    labels = list(colors.keys())
    handles = [plt.Rectangle((1, 1), 1, 1, color=colors[label]) for label in labels]
    plt.legend(handles, labels, loc="upper right")
    tikzplotlib.save(f"tex/{sheet_name}.tex")
    plt.show()


def comparison_various_number_of_pis_diagram_2(sheet_name: str, column_range: str, desktop_column: str, xlabel: str,
                                             ylabel: str):
    sheet = client.open(sheet_name).sheet1
    pis = sheet.get("A2:A6")
    pis = list(map(int, reduce(operator.concat, pis)))
    y = convertStringToFloat(list(reduce(operator.concat, sheet.get(column_range))))
    plt.style.use("ggplot")
    plt.bar(pis, y, color='red')
    axes = plt.gca()
    axes.set_ylim([0, 100])
    threshold = convertStringToFloat(list(reduce(operator.concat, sheet.get(desktop_column))))
    plt.axhline(y=threshold, linewidth=3, color='b')
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    colors = {'Run time': 'red', 'Single Node Run time': 'blue'}
    labels = list(colors.keys())
    handles = [plt.Rectangle((1, 1), 1, 1, color=colors[label]) for label in labels]
    plt.legend(handles, labels, loc="upper right")
    tikzplotlib.save(f"tex/{sheet_name}_2.tex")
    plt.show()

worksheets = ["Pivot_Adagrad_BCE", "Pivot_Adagrad_MSE",
              "Pivot_ASGD_BCE", "Pivot_ASGD_MSE",
              "Pivot_SGD_BCE", "Pivot_SGD_MSE"]

scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('susml-secret.json', scope)
client = gspread.authorize(creds)
#
# create_diagram('RAM_usage_benchmark_12_PIs', worksheets, "Duration (Minutes)", "Memory Usage (MB)", False)
# sleep(5)
# create_diagram('CPU_usage_benchmark_12_PIs', worksheets, "Duration (Minutes)", "CPU Usage (Percentage)", False)
# sleep(5)
#
# worksheets = {"One Slot": "Pivot_SGD_MSE_1", "Two Slots": "Pivot_SGD_MSE_2"}
# create_diagram_2_slot('Two_slots_RAM_usage_benchmark_12_PIs', worksheets, "Duration (Minutes)", "Memory Usage (MB)", True)
# sleep(5)
# create_diagram_2_slot('Two_slots_CPU_usage_benchmark_12_PIs', worksheets, "Duration (Minutes)", "CPU Usage (Percentage)", True)
# sleep(5)
comparison_various_number_of_pis_diagram("Benchmark_comparison_of_various_numbers_of_pis", "H2:H6", "I2", "Number of Pis",
                                         "Duration (Minutes)")
sleep(5)
comparison_various_number_of_pis_diagram_2("Benchmark_comparison_of_various_numbers_of_pis", "D2:D6", "E2", "Number of Pis", "Accuracy (Percentage)")
sleep(5)


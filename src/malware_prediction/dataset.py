import pandas as pd
import torch
from torch.utils import data


class MalwareDataset(data.Dataset):

    _FE = ['EngineVersion_FE', 'AppVersion_FE', 'AvSigVersion_FE', 'Census_OSVersion_FE']

    def __init__(self, X, y, cols, rows):
        self.X = X
        self.y = y
        self.cols = cols
        self.rows = rows

    def __len__(self):
        return len(self.X)

    def __getitem__(self, index):
        return self.X[index], self.y[index]

    @classmethod
    def load(cls, csv_path_train, is_train=True):
        columns = pd.read_csv(csv_path_train, nrows=0).columns.tolist()
        dtypes = {}
        for x in columns:
            if x in cls._FE:
                dtypes[x] = 'float16'
            elif x == 'MachineIdentifier':
                dtypes[x] = 'str'
            else:
                dtypes[x] = 'uint8'
        df = pd.read_csv(csv_path_train, dtype=dtypes, error_bad_lines=False)
        if is_train:
            X, y_train = cls.prepare_training(df)
            return cls(X=X, y=y_train, cols=len(df.columns) - 2, rows=len(df.index))
        else:
            X, id = cls.prepare_test(df)
            return cls(X=X, y=id, cols=len(df.columns) - 1, rows=len(df.index))

    @staticmethod
    def prepare_training(df):
        X = df.drop('HasDetections', axis=1).drop('MachineIdentifier', axis=1).values
        y = df['HasDetections'].values

        X_train = torch.FloatTensor(X)
        y_train = torch.FloatTensor(y)

        return X_train, y_train

    @staticmethod
    def prepare_test(df):
        X = df.drop('MachineIdentifier', axis=1).values
        id = df['MachineIdentifier'].values
        X_test = torch.FloatTensor(X)
        return X_test, id


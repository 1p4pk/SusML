import os
import torch
from torch import nn
from torch import optim
from torch import distributed as dist
from torch.nn.parallel import DistributedDataParallel as DDP

import pandas as pd

from sklearn.model_selection import train_test_split

from model import MalwarePredictor
from train import ModelTrainer
from data_preparator import DataPreparator



def run_preparation(df, test_size=0.2):
    X = df.drop('HasDetections', axis=1).drop('MachineIdentifier', axis=1).values
    y = df['HasDetections'].values

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)

    X_train = torch.FloatTensor(X_train)
    X_test = torch.FloatTensor(X_test)
    y_train = torch.FloatTensor(y_train)
    y_test = torch.FloatTensor(y_test)
    return X_train, X_test, y_train, y_test

if __name__ == '__main__':
    os.environ['MASTER_ADDR'] = '192.168.0.172'
    os.environ['MASTER_PORT'] = '56792'

    size = 2
    rank = 0
    df = DataPreparator().import_data(5000, offset=1, use_ohe=False)
    cols, _ = DataPreparator().encode_data(df, use_ohe=False)
    X_train, X_test, y_train, y_test = run_preparation(df)
    model = DDP(MalwarePredictor())
    model = MalwarePredictor(len(cols), 100, 100, 1)
    loss = nn.MSELoss()
    optimizer = optim.SGD(model.parameters(), lr=0.01)
    dist.init_process_group('mpi', rank=rank, world_size=size)
    trainer = ModelTrainer(model, loss, optimizer)
    trainer.train(10, X_train, y_train, verbose=True)
    dist.destroy_process_group()
    preds = []

    with torch.no_grad():
        for val in X_test:
            y_hat = model.forward(val)
            preds.append(y_hat.argmax().item())

    df = pd.DataFrame({'Y': y_test, 'YHat': preds})
    df['Correct'] = [1 if corr == pred else 0 for corr, pred in zip(df['Y'], df['YHat'])]
    print(df['Correct'].sum() / len(df))


import os
import sys

import torch
from torch import nn
from torch import optim
from torch import distributed as dist
from torch.nn.parallel import DistributedDataParallel as DDP

import pandas as pd

from sklearn.model_selection import train_test_split

from model import MalwarePredictor
from train import ModelTrainer
from data_preparator import DataPreparator



def run_preparation(df, test_size=0.2):
    X = df.drop('HasDetections', axis=1).drop('MachineIdentifier', axis=1).values
    y = df['HasDetections'].values

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)

    X_train = torch.FloatTensor(X_train)
    X_test = torch.FloatTensor(X_test)
    y_train = torch.FloatTensor(y_train)
    y_test = torch.FloatTensor(y_test)
    return X_train, X_test, y_train, y_test


def run(size, rank, backend='mpi', init='env://'):
    df = DataPreparator().import_data(5000, offset=1, use_ohe=False)
    cols, _ = DataPreparator().encode_data(df, use_ohe=False)
    X_train, X_test, y_train, y_test = run_preparation(df)
    print("Data prepared.")
    dist.init_process_group(backend, init_method=init, rank=rank, world_size=size)
    print(f"my world size and rank: {dist.get_rank(), dist.get_world_size()}")
    model = DDP(MalwarePredictor(len(cols), 100, 100, 1))
    loss = nn.MSELoss()
    optimizer = optim.SGD(model.parameters(), lr=0.01)
    print("Model prepared.")
    print("Process group initialized.")
    trainer = ModelTrainer(model, loss, optimizer)
    print("Trainer initialized.")
    trainer.train(10, X_train, y_train, verbose=True)
    print("Done training.")
    dist.destroy_process_group()
    preds = []

    with torch.no_grad():
        for val in X_test:
            y_hat = model.forward(val)
            preds.append(y_hat.argmax().item())

    df = pd.DataFrame({'Y': y_test, 'YHat': preds})
    df['Correct'] = [1 if corr == pred else 0 for corr, pred in zip(df['Y'], df['YHat'])]
    print(df['Correct'].sum() / len(df))


if __name__ == '__main__':
    if sys.argv[0] is None:
        print("Please Provide the IP Address of the Master")
    os.environ['MASTER_ADDR'] = str(sys.argv[0])#'192.168.0.172'
    os.environ['MASTER_PORT'] = '56792'
    os.environ['INIT_METHOD'] = 'env://'
    world_size = os.environ['OMPI_COMM_WORLD_SIZE']
    print(f"The World Size is: {world_size}")
    rank = os.environ['OMPI_COMM_WORLD_RANK']
    print(f"The Rank is: {world_size}")
    run(world_size, rank, backend='mpi', init='env://')


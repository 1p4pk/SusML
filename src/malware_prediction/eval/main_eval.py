import os
import socket
import sys

import numpy as np
import pandas as pd
import torch
from torch import distributed as dist
from torch.utils.data.dataloader import DataLoader

from .dataset_test import MalwareTestDataset
from ..benchmark import timeit, memory_monitor, cpu_monitor

SIZE = int(os.environ['OMPI_COMM_WORLD_SIZE'])
RANK = int(os.environ['OMPI_COMM_WORLD_RANK'])
HOSTNAME = socket.gethostname()
OPTIMIZER = sys.argv[2]
LOSS_FUNCTION = sys.argv[3]

# TEST_TENSOR_PATH = f'./data/tensor/test_data_{RANK}.pt'
# MACHINE_ID_CSV_PATH = f"./data/tensor/machine_id_{RANK}.csv"
# SUBMISSION_CSV_PATH = f"./data/submission_{OPTIMIZER}_{LOSS_FUNCTION}_{RANK}.csv"

TEST_TENSOR_PATH = './data/tensor/test_data.pt'
MACHINE_ID_CSV_PATH = f"./data/tensor/machine_id.csv"
SUBMISSION_CSV_PATH = f"./data/submission_{OPTIMIZER}_{LOSS_FUNCTION}.csv"

MODEL_PATH = f"./models/model_{OPTIMIZER}_{LOSS_FUNCTION}.pb"


@cpu_monitor(file_name="")
@memory_monitor(file_name="")
@timeit(file_name="")
def run(backend='mpi'):
    batch_size = 100
    print("Start run eval:")
    dist.init_process_group(backend)
    print("load data")
    dataset = MalwareTestDataset(TEST_TENSOR_PATH, MACHINE_ID_CSV_PATH)
    data_loader = DataLoader(dataset, batch_size=batch_size)
    print("load model")
    # loading model: https://stackoverflow.com/a/49078976
    model = torch.load(MODEL_PATH)
    model.eval()

    predictions = np.zeros(data_loader.dataset.rows)
    ids = []

    with torch.no_grad():
        for i, (x_batch, y_batch) in enumerate(data_loader):
            ids += list(y_batch)
            y_pred = model(x_batch).detach()
            predictions[i * batch_size:(i + 1) * batch_size] += y_pred.cpu().numpy()[:, 0]

    df = pd.DataFrame({'MachineIdentifier': ids, 'HasDetections': predictions})
    df.to_csv(SUBMISSION_CSV_PATH, index=False)
    print("Done evaluating.")
    dist.destroy_process_group()


def init_processes(fn):
    """ Initialize the distributed environment. """
    print(f"Running rank {RANK} of {SIZE} on {HOSTNAME}")
    fn()


if __name__ == '__main__':
    init_processes(run)

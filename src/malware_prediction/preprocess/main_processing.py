import os
import socket
import sys

from ..benchmark import timeit, memory_monitor, cpu_monitor, disk_monitor
from .preprocessor import Preprocessor

SIZE = int(os.environ['OMPI_COMM_WORLD_SIZE'])
RANK = int(os.environ['OMPI_COMM_WORLD_RANK'])
HOSTNAME = socket.gethostname()

TEST_CSV_PATH = "./data/test/test.csv"
TRAIN_CSV_PATH = "./data/train/train.csv"

LABEL_DATA_PATH = f'./data/tensor/label_data.pt'
TRAIN_DATA_PATH = f'./data/tensor/train_data.pt'
TEST_DATA_PATH = f'./data/test/test_data.csv'
MACHINE_ID_CSV_PATH = f"./data/test/machine_id.csv"

# LABEL_DATA_PATH = f'./data/tensor/label_data_{RANK}.pt'
# TRAIN_DATA_PATH = f'./data/tensor/train_data_{RANK}.pt'
# TEST_DATA_PATH = f'./data/tensor/test_data_{RANK}.pt'
# MACHINE_ID_CSV_PATH = f"./data/tensor/machine_id_{RANK}.csv"

preprocessor = Preprocessor()


@cpu_monitor(file_name="preprocessing")
@memory_monitor(file_name="preprocessing")
@disk_monitor(file_name="preprocessing")
@timeit(file_name="preprocessing")
def run():
    print(f"Running train preprocessing with rank {RANK} of {SIZE} on {HOSTNAME}")
    row_num_train = int(sys.argv[1])
    df = preprocessor.import_data(TRAIN_CSV_PATH, row_num_train)
    preprocessor.encode_data(df)
    preprocessor.save_train_to_tensor(df, LABEL_DATA_PATH, TRAIN_DATA_PATH)


def run_test_encoding():
    print(f"Running test preprocessing with rank {RANK} of {SIZE} on {HOSTNAME}")
    row_num_test = int(sys.argv[2])
    df = preprocessor.import_data(TEST_CSV_PATH, row_num_test, is_train=False)
    for chunk in df:
        preprocessor.encode_data(chunk, is_train=False)
        chunk.drop('MachineIdentifier', axis=1).to_csv(TEST_DATA_PATH, index=False, mode='a')
        chunk['MachineIdentifier'].to_csv(MACHINE_ID_CSV_PATH, index=False, mode='a')


if __name__ == '__main__':
    run()
    run_test_encoding()

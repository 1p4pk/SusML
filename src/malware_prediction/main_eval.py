import os
import socket

import numpy as np
import pandas as pd
import torch
from benchmark import memory_monitor
from benchmark import timeit
from dataset import MalwareDataset
from torch import distributed as dist
from torch.utils.data.dataloader import DataLoader

SIZE = int(os.environ['OMPI_COMM_WORLD_SIZE'])
RANK = int(os.environ['OMPI_COMM_WORLD_RANK'])
HOSTNAME = socket.gethostname()

# TEST_ENCODED_CSV_PATH = f"./data/test/test_encoded_{RANK}.csv"
# SUBMITION_CSV_PATH = f"./data/submission_{RANK}.csv"

TEST_ENCODED_CSV_PATH = f"./data/test/test_encoded.csv"
SUBMITION_CSV_PATH = f"./data/submission.csv"

MODEL_PATH = "./models/model.pb"
ROWS = DataLoader(MalwareDataset.load(TEST_ENCODED_CSV_PATH, is_train=False), batch_size=1).dataset.rows


@timeit(save_path=f"./data/benchmark/run_time_eval_{ROWS}.csv", row_count=ROWS)
@memory_monitor
def run(backend='mpi'):
    batch_size = 100
    print("Start run eval:")
    dist.init_process_group(backend)
    print("load data")
    dataset = MalwareDataset.load(TEST_ENCODED_CSV_PATH, is_train=False)
    data_loader = DataLoader(dataset, batch_size=batch_size)
    print("load model")
    # loading model: https://stackoverflow.com/a/49078976
    model = torch.load(MODEL_PATH)
    model.eval()

    predictions = np.zeros(data_loader.dataset.rows)
    ids = []

    with torch.no_grad():
        for i, (x_batch, y_batch) in enumerate(data_loader):
            ids += list(y_batch)
            y_pred = model(x_batch).detach()
            predictions[i * batch_size:(i + 1) * batch_size] += y_pred.cpu().numpy()[:, 0]

    df = pd.DataFrame({'MachineIdentifier': ids, 'HasDetections': predictions})
    df.to_csv(SUBMITION_CSV_PATH, index=False)
    print("Done evaluating.")
    dist.destroy_process_group()


def init_processes(fn):
    """ Initialize the distributed environment. """
    print(f"Running rank {RANK} of {SIZE} on {HOSTNAME}")
    fn()


if __name__ == '__main__':
    init_processes(run)

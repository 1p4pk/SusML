import os
import socket

import pandas as pd
import torch
from dataset import MalwareDataset
from torch import distributed as dist
from torch.utils.data.dataloader import DataLoader

SIZE = int(os.environ['OMPI_COMM_WORLD_SIZE'])
RANK = int(os.environ['OMPI_COMM_WORLD_RANK'])
HOSTNAME = socket.gethostname()

TEST_ENCODED_CSV_PATH = f"./data/test/test_encoded_{RANK}.csv"
SUBMITION_CSV_PATH = f"./data/train/submission_{RANK}.csv"
# TEST_ENCODED_CSV_PATH = f"./data/test/test_encoded.csv"
# SUBMITION_CSV_PATH = f"./data/train/submission.csv"
MODEL_PATH = "./models/model.pb"


def run(backend='mpi'):
    print("Start run eval:")
    dist.init_process_group(backend)
    print("load data")
    dataset = MalwareDataset.load(TEST_ENCODED_CSV_PATH, is_train=False)
    data_loader = DataLoader(dataset, batch_size=100)
    print("load model")
    # loading model: https://stackoverflow.com/a/49078976
    model = torch.load(MODEL_PATH)
    model.eval()
    predictions = []

    X_test = data_loader.dataset.X
    id = data_loader.dataset.y

    with torch.no_grad():
        for val in X_test:
            y_hat = model.forward(val)
            predictions.append(y_hat.argmax().item())

    df = pd.DataFrame({'MachineIdentifier': id, 'HasDetections': predictions})
    df.to_csv(SUBMITION_CSV_PATH, index=False)
    print("Done evaluating.")
    dist.destroy_process_group()


def init_processes(fn):
    """ Initialize the distributed environment. """
    print(f"Running rank {RANK} of {SIZE} on {HOSTNAME}")
    fn()


if __name__ == '__main__':
    init_processes(run)

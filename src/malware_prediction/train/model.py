import torch.nn as nn


class MalwarePredictor(nn.Module):
    def __init__(self, n_features: int, n_hidden_0: int, n_hidden_1: int, n_output):
        super(MalwarePredictor, self).__init__()
        self.net1 = nn.Linear(n_features, n_hidden_0)
        self.dropout1 = nn.Dropout(p=.4)
        self.relu1 = nn.ReLU()
        self.net2 = nn.Linear(n_hidden_0, n_hidden_1)
        self.dropout2 = nn.Dropout(p=.4)
        self.relu2 = nn.ReLU()
        self.net3 = nn.Linear(n_hidden_1, n_output)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        return self.sigmoid(self.net3(self.relu2(self.dropout2(self.net2(self.relu1(self.dropout1(self.net1(x))))))))
